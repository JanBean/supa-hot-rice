# This script depends on `functions' and `environment-variables'.

# This is NOT a script for execution, but for loading functions, so NOT need execution permission or shebang.
# NOTE that you NOT need to `cd ..' because the `$0' is NOT this file, but the script file which will source this file.

# The script that use this file should have two lines on its top as follows:
# cd "$(dirname "$0")"
# export base="$(pwd)"

################################## Installing ###########################################

install_default_packages() {
  # Collect all subdirectories (with PKGBUILD) inside ./packages/default/
  defaultpkgs=($(find ./packages/default/ -mindepth 1 -maxdepth 1 -type d -exec test -f "{}/PKGBUILD" \; -exec basename {} \;))

  prompt_install_packages "./packages/default" "${defaultpkgs[@]}"
}

install_theme_packages() {
  # Install all collected packages
  prompt_install_packages "./packages/themes" "$@"
}

prompt_install_packages() {
  local pkg_super_path="$1"
  shift
  local pkg_list=("$@")

  options=()
  for opt in "${pkg_list[@]}"; do
    options+=(--selected "$opt")
  done

  # Prompt user to choose
  echo -e "\e[34mInstalling following packages, deselect unwanted:\e[0m"

  selected_pkgs=$(printf "%s\n" "${pkg_list[@]}" "CANCEL" | gum choose --no-limit "${options[@]}")

  if [[ -z "$selected_pkgs" ]] || grep -q "^CANCEL$" <<< "$selected_pkgs"; then
    echo -e "\e[31m :: !!!!!!!!!!! Installing packages cancelled!!!!!!!!! \e[0m"
  else
    mapfile -t selected_pkgs_list <<< "$selected_pkgs"

    for pkg in "${selected_pkgs_list[@]}"; do
      pkg_path="$pkg_super_path/$pkg"
      metainstallflags="--needed"
      $ask && showfun install_local_pkgbuild || metainstallflags="$metainstallflags --noconfirm"
      ask_execute install_local_pkgbuild "$pkg_path" "$metainstallflags"
    done
  fi
}

# yay -Bi is kinda hit or miss, instead cd into the relevant directory and manually source and install deps
install_local_pkgbuild() {
	local location=$1
	local installflags=$2

	on_error_retry pushd $location

	source ./PKGBUILD

  # install as dependencies to hide from explicit installed pkgs and auto romeovable
	on_error_retry yay -S $installflags --asdeps "${depends[@]}"
	# package local
	on_error_retry makepkg -Asi --noconfirm

	on_error_retry popd

  # Optional package setup
  if [[ -f "$location/setup.sh" ]]; then
    source $location/setup.sh
    load_setup
  fi
}

install_python_packages() {
  remove_bashcomments_emptylines packages/python/python-packages.in ./cache/python-packages.in

  UV_NO_MODIFY_PATH=1
  SHR_VIRTUAL_ENV=$XDG_STATE_HOME/ags/.venv
  on_error_retry mkdir -p $(eval echo $SHR_VIRTUAL_ENV)
  # we need python 3.12 https://github.com/python-pillow/Pillow/issues/8089
  on_error_retry uv venv --prompt .venv $(eval echo $SHR_VIRTUAL_ENV) -p 3.12
  on_error_retry source $(eval echo $SHR_VIRTUAL_ENV)/bin/activate
  on_error_retry uv pip compile ./cache/python-packages.in -o packages/python/python-packages.txt # evtl python-packages.txt vorher mit mkdir erstellen
  on_error_retry uv pip install -r packages/python/python-packages.txt
  on_error_retry deactivate # We don't need the virtual environment anymore
}

############################################ Uninstalling #########################################

uninstall_default_packages() {

  # Collect all subdirectories (with PKGBUILD) inside ./packages/default/
  defaultpkgs=($(find ./packages/default/ -mindepth 1 -maxdepth 1 -type d -exec test -f "{}/PKGBUILD" \; -exec basename {} \;))

  prompt_uninstall_packages "./packages/default" "${defaultpkgs[@]}"
}

uninstall_theme_packages() {
  # Remove all theme packages
  for themepkg in "$@"; do
    metaremoveflags="--noconfirm"
    $ask && showfun sudo pacman -Rns || true
    ask_execute sudo pacman -Rns $metaremoveflags "$themepkg"
  done
}

prompt_uninstall_packages() {
  local pkg_super_path="$1"
  shift
  local pkg_list=("$@")

  options=()
  for opt in "${pkg_list[@]}"; do
    options+=(--selected "$opt")
  done

  # Prompt user to choose
  echo -e "\e[34m Uninstalling following packages, deselect undwanted:\e[0m"

  selected_pkgs=$(printf "%s\n" "${pkg_list[@]}" "CANCEL" | gum choose --no-limit "${options[@]}")

  if [[ -z "$selected_pkgs" ]] || grep -q "^CANCEL$" <<< "$selected_pkgs"; then
    echo -e "\e[31m :: !!!!!!!!!!! Uninstalling packages cancelled!!!!!!!!! \e[0m"
  else
    mapfile -t selected_pkgs_list <<< "$selected_pkgs"

    for pkg in "${selected_pkgs_list[@]}"; do
      pkg_path="$pkg_super_path/$pkg"
      $ask && showfun uninstall_local_pkgbuild
      ask_execute uninstall_local_pkgbuild "$pkg_path"
    done
  fi
}

uninstall_local_pkgbuild() {
	local location=$1

	on_error_retry pushd "$location"

	# Source the PKGBUILD to get pkgname
	source ./PKGBUILD

	# Uninstall all package names (handles split packages too)
	on_error_retry yay -Rns --noconfirm "${pkgname[@]}"

	on_error_retry popd

  # Optional package setup
  if [[ -f "$location/setup.sh" ]]; then
    source $location/setup.sh
    unload_setup
  fi
}
