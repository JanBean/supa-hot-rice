# This script depends on `functions' .
# This is NOT a script for execution, but for loading functions, so NOT need execution permission or shebang.
# NOTE that you NOT need to `cd ..' because the `$0' is NOT this file, but the script file which will source this file.

# The script that use this file should have two lines on its top as follows:
# cd "$(dirname "$0")"
# export base="$(pwd)"

# installs all apps, aur apps and flatpak apps
install_apps() {

  # Apps installation
  remove_bashcomments_emptylines ./apps/apps.lst ./cache/apps.lst
  readarray -t apps < ./cache/apps.lst
  ask_execute install_packages is_installed_yay "yay -S" "${apps[@]}"

  # Flatpak app installation
  remove_bashcomments_emptylines ./apps/apps-flathub.lst ./cache/apps-flathub.lst
  readarray -t flathub_apps < ./cache/apps-flathub.lst
  ask_execute install_flathub_packages "${flathub_apps[@]}"
}

install_packages() {
  is_installed_func="$1"
  shift
  install_command="$1"
  shift

  app_list=()
  for app; do
      if [[ $($is_installed_func "${app}") == 0 ]]; then
          echo ":: ${app} is already installed."
          continue
      fi
      app_list+=("${app}")
  done

  if [[ "${app_list[@]}" == "" ]]; then
      echo "Nothing to install."
      return
  fi

  options=()
  for opt in "${app_list[@]}"; do
      options+=(--selected "$opt")
  done

  # Prompt user to choose
  echo -e "\e[34mInstalling the following apps, deselect unwanted:\e[0m"

  selected_apps=$(printf "%s\n" "${app_list[@]}" "CANCEL" | gum choose --no-limit "${options[@]}")

  if [[ -z "$selected_apps" ]] || grep -q "^CANCEL$" <<< "$selected_apps"; then
      echo -e "\e[31m :: !!!!!!!!!!! Installing apps cancelled!!!!!!!!! \e[0m"
  else
      mapfile -t to_install <<< "$selected_apps"
      on_error_retry $install_command --noconfirm "${to_install[@]}"
  fi
}


is_installed_pacman() {
    package="$1"
    if sudo pacman -Qs --color always "${package}" | grep -q "local"; then
        echo 0  # true
    else
        echo 1  # false
    fi
}

is_installed_yay() {
    package="$1"
    if yay -Qq "${package}" &>/dev/null; then
        echo 0  # true
    else
        echo 1  # false
    fi
}

install_flathub_packages() {
    toInstall=()
    for pkg; do
        # check if already installed
        if flatpak list --app | awk '{print $2}' | grep -q "^$pkg$"; then
            echo ":: ${pkg} is already installed."
            continue
        fi
        toInstall+=("${pkg}")
    done
    
    if [[ "${toInstall[@]}" == "" ]]; then
        # nothing to install 
        return
    fi

    if gum confirm "Install flatpak apps?"; then
        for pkg in "${toInstall[@]}"; do
            on_error_retry flatpak install flathub -y "${pkg}"
        done
    fi
}